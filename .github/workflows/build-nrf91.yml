name: Build nRF91 1NCE Demos

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag name for GitHub release'
        required: true


env:
  NCS_VERSION: v2.8.0
  NCE_REVISION: main
  ZEPHYR_TOOLCHAIN_VARIANT: zephyr
  ZEPHYR_SDK_INSTALL_DIR: /root/ncs/toolchains/b81a7cd864/opt/zephyr-sdk

jobs:
  build_and_upload:
    name: ${{ matrix.friendly_name }}
    runs-on: ubuntu-22.04
    container:
      image: mtalatcise/nce-nrf:v2.8.0
      options: --workdir /workdir/nce
    defaults:
      run:
        working-directory: /workdir/nce
        shell: bash
    strategy:
      matrix:
        include:
          - board: thingy91/nrf9160
            friendly_name: Thingy91
          - board: nrf9160dk/nrf9160
            friendly_name: nRF9160-DK
          - board: nrf9151dk/nrf9151
            friendly_name: nRF9151-DK


    steps:
      - name: Checkout release code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Overlay release code into workspace
        run: |
          mkdir -p /workdir/nce/blueprint-zephyr
          cp -rv ${GITHUB_WORKSPACE}/* /workdir/nce/blueprint-zephyr/
          cp -rv ${GITHUB_WORKSPACE}/.[!.]* /workdir/nce/blueprint-zephyr/ || true

      - name: Prepare artifacts folder
        run: mkdir -p /workdir/artifacts

      - name: Build standard demos
        working-directory: /workdir/nce/blueprint-zephyr
        run: |
          source /opt/venv/bin/activate
          BOARD="${{ matrix.board }}"
          BOARD_FOLDER=$(echo "$BOARD" | tr '/' '_')
          ARTIFACT_DIR="/workdir/artifacts/$BOARD_FOLDER"
          mkdir -p "$ARTIFACT_DIR"

          DEMOS=(nce_udp_demo nce_coap_demo plugin_system/nce_debug_memfault_demo)

          for DEMO in "${DEMOS[@]}"; do
              DEMO_NAME=$(basename "$DEMO")
              BUILD_DIR="/workdir/nce/build_${DEMO_NAME}_${BOARD_FOLDER}"

              if [[ "$BOARD" == thingy91* ]]; then
                  HEX_FILE="${BUILD_DIR}/$DEMO_NAME/zephyr/zephyr.signed.hex"
              else
                  HEX_FILE="${BUILD_DIR}/merged.hex"
              fi

              west build --build-dir "$BUILD_DIR" "$DEMO" -b "$BOARD/ns" -- \
                  -DNCS_TOOLCHAIN_VERSION=NONE -DCONFIG_BOOTLOADER_MCUBOOT=y

              cp "$HEX_FILE" "$ARTIFACT_DIR/${DEMO_NAME}.hex"
          done

      - name: Build Mender demo
        working-directory: /workdir/nce/blueprint-zephyr
        run: |
          source /opt/venv/bin/activate
          BOARD="${{ matrix.board }}"
          BOARD_FOLDER=$(echo "$BOARD" | tr '/' '_')
          DEMO="plugin_system/nce_fota_mender_demo"
          DEMO_NAME=$(basename "$DEMO")
          BUILD_DIR="/workdir/nce/build_${DEMO_NAME}_${BOARD_FOLDER}"
          ARTIFACT_DIR="/workdir/artifacts/$BOARD_FOLDER/$DEMO_NAME"
          mkdir -p "$ARTIFACT_DIR"

          for VER in v1 v2; do
              # Update prj.conf for version 2
              [ "$VER" = "v2" ] && sed -i 's/CONFIG_APPLICATION_VERSION=1/CONFIG_APPLICATION_VERSION=2/; s/CONFIG_ARTIFACT_NAME="release-v1"/CONFIG_ARTIFACT_NAME="release-v2"/' "$DEMO/prj.conf"

              BUILD_VER="${BUILD_DIR}_${VER}"

              west build --build-dir "$BUILD_VER" "$DEMO" -b "$BOARD/ns" -- -DNCS_TOOLCHAIN_VERSION=NONE -DCONFIG_BOOTLOADER_MCUBOOT=y

              BIN_FILE="$ARTIFACT_DIR/release-${VER}.bin"
              cp "$BUILD_VER/$DEMO_NAME/zephyr/zephyr.signed.bin" "$BIN_FILE"
              cp "$BUILD_VER/$DEMO_NAME/zephyr/zephyr.signed.hex" "$ARTIFACT_DIR/release-${VER}.hex"

              mender-artifact write module-image -t "$BOARD_FOLDER" \
                  -o "$ARTIFACT_DIR/release-${VER}.mender" \
                  -T release-$VER -n release-$VER \
                  -f "$BIN_FILE" --compression none
          done

          git checkout -- "$DEMO/prj.conf"

      - name: Create zip per board
        run: |
          BOARD_FOLDER=$(echo "${{ matrix.board }}" | tr '/' '_')
          cd /workdir/artifacts/$BOARD_FOLDER
          zip -r /workdir/artifacts/${{ matrix.friendly_name }}.zip .
          echo "Created zip: /workdir/artifacts/${{ matrix.friendly_name }}.zip"

      - name: Upload release artifacts
        if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
        uses: softprops/action-gh-release@v1
        with:
          files: /workdir/artifacts/*.zip
          tag_name: ${{ github.event.release.tag_name || github.event.inputs.release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
