name: Build nRF91 1NCE Demos

on:
  release:
    types: [created]

env:
  NCS_VERSION: v2.8.0
  NCE_REVISION: main
  ZEPHYR_TOOLCHAIN_VARIANT: zephyr
  ZEPHYR_SDK_INSTALL_DIR: /root/ncs/toolchains/b81a7cd864/opt/zephyr-sdk

  DEMOS: nce_udp_demo plugin_system/nce_debug_memfault_demo

jobs:

  build:
    runs-on: ubuntu-22.04
    container:
      image: mtalatcise/nce-nrf:v2.8.0
      options: --workdir /workdir/nce
    defaults:
      run:
        working-directory: /workdir/nce
    strategy:
      matrix:
        board: [thingy91/nrf9160]
    steps:
      - name: Checkout release code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Overlay release code into preinitialized workspace
        run: |
          echo "Copying release code into /workdir/nce/blueprint-zephyr"
          mkdir -p /workdir/nce/blueprint-zephyr

          echo "Copying non-hidden files/folders:"
          cp -rv ${GITHUB_WORKSPACE}/* /workdir/nce/blueprint-zephyr/

          echo "Copying hidden files/folders (dotfiles):"
          cp -rv ${GITHUB_WORKSPACE}/.[!.]* /workdir/nce/blueprint-zephyr/ || true

          echo ""
          echo "Contents of /workdir/nce/blueprint-zephyr after copy:"
          ls -lR /workdir/nce/blueprint-zephyr

      - name: Prepare artifacts folder
        run: mkdir -p /workdir/artifacts

      - name: Build all demos for board
        run: |
          cd blueprint-zephyr
          BOARD_SAFE=$(echo "${{ matrix.board }}" | tr '/' '_')
          ARTIFACT_DIR="/workdir/artifacts/$BOARD_SAFE"
          mkdir -p "$ARTIFACT_DIR"

          for DEMO in $DEMOS; do
            DEMO_NAME=$(basename "$DEMO")
            BUILD_DIR="/workdir/nce/build_${DEMO_NAME}_${BOARD_SAFE}"
            echo "Building $DEMO for ${{ matrix.board }} in $BUILD_DIR"
            west build --build-dir "$BUILD_DIR" "$DEMO" -b "${{ matrix.board }}/ns"
            cp "$BUILD_DIR/$DEMO_NAME/zephyr/zephyr.bin" "$ARTIFACT_DIR/${DEMO_NAME}.bin"
          done

      - name: Install zip utility
        run: apt-get update && apt-get install -y zip

      - name: Create zip per board
        run: |
          BOARD_SAFE=$(echo "${{ matrix.board }}" | tr '/' '_')
          cd /workdir/artifacts/$BOARD_SAFE
          zip -r /workdir/artifacts/${BOARD_SAFE}.zip .
          echo "Created zip: /workdir/artifacts/${BOARD_SAFE}.zip"

      - name: Upload artifacts to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG=${{ github.event.release.tag_name }}
          echo "Uploading all zips to release $RELEASE_TAG"
          for FILE in /workdir/artifacts/*.zip; do
            echo "Uploading $FILE ..."
            gh release upload "$RELEASE_TAG" "$FILE" --clobber
            echo " $FILE Uploaded successfully."
          done
