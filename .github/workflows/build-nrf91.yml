name: Build nRF91 1NCE Demos

on:
  release:
    types: [created]
  workflow_dispatch:

env:
  NCS_VERSION: v2.8.0
  NCE_REVISION: main
  ZEPHYR_TOOLCHAIN_VARIANT: zephyr
  ZEPHYR_SDK_INSTALL_DIR: /root/ncs/toolchains/b81a7cd864/opt/zephyr-sdk
  DEMOS: nce_udp_demo nce_coap_demo plugin_system/nce_debug_memfault_demo plugin_system/nce_fota_mender_demo

jobs:
  build_and_upload:
    runs-on: ubuntu-22.04
    container:
      image: mtalatcise/nce-nrf:v2.8.0
      options: --workdir /workdir/nce
    defaults:
      run:
        working-directory: /workdir/nce
    strategy:
      matrix:
        board: [thingy91/nrf9160, nrf9160dk/nrf9160, nrf9151dk/nrf9151]

    steps:
      - name: Checkout release code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Overlay release code into workspace
        run: |
          mkdir -p /workdir/nce/blueprint-zephyr
          cp -rv ${GITHUB_WORKSPACE}/* /workdir/nce/blueprint-zephyr/
          cp -rv ${GITHUB_WORKSPACE}/.[!.]* /workdir/nce/blueprint-zephyr/ || true

      - name: Prepare artifacts folder
        run: mkdir -p /workdir/artifacts

      - name: Build demos
        run: |
          # Activate virtual environment
          source /opt/venv/bin/activate
          cd blueprint-zephyr
          BOARD="${{ matrix.board }}"
          BOARD_FOLDER=$(echo "$BOARD" | tr '/' '_')
          ARTIFACT_DIR="/workdir/artifacts/$BOARD_FOLDER"
          mkdir -p "$ARTIFACT_DIR"

          for DEMO in $DEMOS; do
            DEMO_NAME=$(basename "$DEMO")
            BUILD_DIR="/workdir/nce/build_${DEMO_NAME}_${BOARD_FOLDER}"
            DEMO_ARTIFACT_DIR="$ARTIFACT_DIR/$DEMO_NAME"
            mkdir -p "$DEMO_ARTIFACT_DIR"

            if [ "$DEMO" = "plugin_system/nce_fota_mender_demo" ]; then
              # Version 1
              west build --build-dir "${BUILD_DIR}_v1" "$DEMO" -b "$BOARD/ns" -- -DNCS_TOOLCHAIN_VERSION=NONE -DCONFIG_BOOTLOADER_MCUBOOT=y
              cp "${BUILD_DIR}_v1/$DEMO_NAME/zephyr/zephyr.signed.hex" "$DEMO_ARTIFACT_DIR/${DEMO_NAME}.hex"
              cp "${BUILD_DIR}_v1/$DEMO_NAME/zephyr/zephyr.signed.bin" "$DEMO_ARTIFACT_DIR/app_update_v1.bin"

              # Create version 1 .mender
              mender-artifact write module-image -t "$BOARD_FOLDER" \
                -o "$DEMO_ARTIFACT_DIR/v1.mender" \
                -T release-v1 -n release-v1 \
                -f "$DEMO_ARTIFACT_DIR/app_update_v1.bin" \
                --compression none

              # Version 2
              sed -i 's/CONFIG_APPLICATION_VERSION=1/CONFIG_APPLICATION_VERSION=2/' "$DEMO/prj.conf"
              sed -i 's/CONFIG_ARTIFACT_NAME="release-v1"/CONFIG_ARTIFACT_NAME="release-v2"/' "$DEMO/prj.conf"
              west build --build-dir "${BUILD_DIR}_v2" "$DEMO" -b "$BOARD/ns" -- -DNCS_TOOLCHAIN_VERSION=NONE  -DCONFIG_BOOTLOADER_MCUBOOT=y
              cp "${BUILD_DIR}_v2/$DEMO_NAME/zephyr/zephyr.signed.bin" "$DEMO_ARTIFACT_DIR/app_update_v2.bin"

              # Create version 2 .mender
              mender-artifact write module-image -t "$BOARD_FOLDER" \
                -o "$DEMO_ARTIFACT_DIR/v2.mender" \
                -T release-v2 -n release-v2 \
                -f "$DEMO_ARTIFACT_DIR/app_update_v2.bin" \
                --compression none

              git checkout -- "$DEMO/prj.conf"

            else
              # Determine hex file based on board
              if [[ "$BOARD" == thingy91* ]]; then
                HEX_FILE="${BUILD_DIR}_v1/$DEMO_NAME/zephyr/zephyr.signed.hex"
              else
                HEX_FILE="${BUILD_DIR}_v1/$DEMO_NAME/merged.hex"
              fi

              # Build
              west build --build-dir "$BUILD_DIR" "$DEMO" -b "$BOARD/ns" -- -DNCS_TOOLCHAIN_VERSION=NONE  -DCONFIG_BOOTLOADER_MCUBOOT=y
              cp "$HEX_FILE" "$DEMO_ARTIFACT_DIR/${DEMO_NAME}.hex"

              echo "=== Build directories and contents ==="
              for BUILD in /workdir/nce/build_*; do
                  if [ -d "$BUILD" ]; then
                      echo "Build folder: $BUILD"
                      find "$BUILD" -maxdepth 2
                      echo "-----------------------------------"
                  fi
              done
            fi
          done

      - name: Create zip per board
        run: |
          BOARD_FOLDER=$(echo "${{ matrix.board }}" | tr '/' '_')
          cd /workdir/artifacts/$BOARD_FOLDER
          zip -r /workdir/artifacts/${BOARD_FOLDER}.zip .
          echo "Created zip: /workdir/artifacts/${BOARD_FOLDER}.zip"

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: /workdir/artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
